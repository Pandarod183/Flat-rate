<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flat Rate Tracker</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; }
    </style>
</head>
<body>
    <div id="root"></div>

```
<script type="text/babel">
    const { useState, useEffect } = React;
    
    // Lucide React icons as SVG components
    const Plus = () => (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M6 12h12M12 6v12"/>
        </svg>
    );
    
    const Clock = () => (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <circle cx="12" cy="12" r="10"/>
            <polyline points="12,6 12,12 16,14"/>
        </svg>
    );
    
    const TrendingUp = () => (
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
            <polyline points="17 6 23 6 23 12"/>
        </svg>
    );
    
    const Edit2 = () => (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
        </svg>
    );
    
    const Trash2 = () => (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <polyline points="3,6 5,6 21,6"/>
            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
            <line x1="10" y1="11" x2="10" y2="17"/>
            <line x1="14" y1="11" x2="14" y2="17"/>
        </svg>
    );
    
    const Save = () => (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>
            <polyline points="17,21 17,13 7,13 7,21"/>
            <polyline points="7,3 7,8 15,8"/>
        </svg>
    );
    
    const X = () => (
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
    );

    const FlatRateTracker = () => {
        const [jobs, setJobs] = useState(() => {
            const saved = localStorage.getItem('flatRateJobs');
            return saved ? JSON.parse(saved) : [];
        });
        
        const [showAddJob, setShowAddJob] = useState(false);
        const [editingJob, setEditingJob] = useState(null);
        const [currentJob, setCurrentJob] = useState({
            id: null,
            repairOrderNumber: '',
            vehicleInfo: '',
            jobDescription: '',
            flatRateHours: '',
            actualHours: '',
            dateCompleted: new Date().toISOString().split('T')[0],
            payType: 'customer_pay',
            status: 'completed'
        });

        const [stats, setStats] = useState({
            totalJobs: 0,
            totalFlatRateHours: 0,
            totalActualHours: 0,
            efficiency: 0
        });

        // Save jobs to localStorage whenever jobs change
        useEffect(() => {
            localStorage.setItem('flatRateJobs', JSON.stringify(jobs));
        }, [jobs]);

        // Calculate stats whenever jobs change
        useEffect(() => {
            const totalJobs = jobs.length;
            const totalFlatRateHours = jobs.reduce((sum, job) => sum + parseFloat(job.flatRateHours || 0), 0);
            const totalActualHours = jobs.reduce((sum, job) => sum + parseFloat(job.actualHours || 0), 0);
            const efficiency = totalActualHours > 0 ? (totalFlatRateHours / totalActualHours) * 100 : 0;

            setStats({
                totalJobs,
                totalFlatRateHours,
                totalActualHours,
                efficiency
            });
        }, [jobs]);

        const handleInputChange = (e) => {
            const { name, value } = e.target;
            setCurrentJob(prev => ({ ...prev, [name]: value }));
        };

        const handleSubmit = () => {
            if (!currentJob.repairOrderNumber || !currentJob.vehicleInfo || !currentJob.jobDescription ||
                !currentJob.flatRateHours || !currentJob.actualHours) {
                alert('Please fill in all required fields');
                return;
            }
            if (editingJob) {
                setJobs(jobs.map(job => job.id === editingJob.id ? { ...currentJob, id: editingJob.id } : job));
                setEditingJob(null);
            } else {
                const newJob = { ...currentJob, id: Date.now() };
                setJobs([...jobs, newJob]);
            }
            resetForm();
        };

        const resetForm = () => {
            setCurrentJob({
                id: null,
                repairOrderNumber: '',
                vehicleInfo: '',
                jobDescription: '',
                flatRateHours: '',
                actualHours: '',
                dateCompleted: new Date().toISOString().split('T')[0],
                payType: 'customer_pay',
                status: 'completed'
            });
            setShowAddJob(false);
        };

        const handleEdit = (job) => {
            setCurrentJob(job);
            setEditingJob(job);
            setShowAddJob(true);
        };

        const handleDelete = (jobId) => {
            if (confirm('Are you sure you want to delete this job?')) {
                setJobs(jobs.filter(job => job.id !== jobId));
            }
        };

        const getEfficiencyColor = (efficiency) => {
            if (efficiency >= 100) return 'text-green-600';
            if (efficiency >= 80) return 'text-yellow-600';
            return 'text-red-600';
        };

        const calculateJobEfficiency = (job) => {
            const actual = parseFloat(job.actualHours || 0);
            const flatRate = parseFloat(job.flatRateHours || 0);
            return actual > 0 ? ((flatRate / actual) * 100).toFixed(1) : 0;
        };

        return (
            <div className="min-h-screen bg-gray-50 p-4">
                <div className="max-w-6xl mx-auto">
                    {/* Header */}
                    <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">Flat Rate Tracker</h1>
                        <p className="text-gray-600">Track your automotive repair jobs and efficiency</p>
                    </div>

                    {/* Stats Dashboard */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div className="bg-white rounded-lg shadow-sm p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-gray-600">Total Jobs</p>
                                    <p className="text-2xl font-bold text-gray-900">{stats.totalJobs}</p>
                                </div>
                                <div className="p-3 bg-blue-100 rounded-full">
                                    <Clock />
                                </div>
                            </div>
                        </div>

                        <div className="bg-white rounded-lg shadow-sm p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-gray-600">Flat Rate Hours</p>
                                    <p className="text-2xl font-bold text-gray-900">{stats.totalFlatRateHours.toFixed(1)}</p>
                                </div>
                                <div className="p-3 bg-green-100 rounded-full">
                                    <TrendingUp />
                                </div>
                            </div>
                        </div>

                        <div className="bg-white rounded-lg shadow-sm p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-gray-600">Actual Hours</p>
                                    <p className="text-2xl font-bold text-gray-900">{stats.totalActualHours.toFixed(1)}</p>
                                </div>
                                <div className="p-3 bg-yellow-100 rounded-full">
                                    <Clock />
                                </div>
                            </div>
                        </div>

                        <div className="bg-white rounded-lg shadow-sm p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-gray-600">Efficiency</p>
                                    <p className={`text-2xl font-bold ${getEfficiencyColor(stats.efficiency)}`}>
                                        {stats.efficiency.toFixed(1)}%
                                    </p>
                                </div>
                                <div className="p-3 bg-indigo-100 rounded-full">
                                    <TrendingUp />
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Add Job Button */}
                    <div className="mb-6">
                        <button
                            onClick={() => setShowAddJob(true)}
                            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
                        >
                            <Plus />
                            Add New Job
                        </button>
                    </div>

                    {/* Add/Edit Job Form */}
                    {showAddJob && (
                        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
                            <div className="flex justify-between items-center mb-4">
                                <h2 className="text-xl font-bold text-gray-900">
                                    {editingJob ? 'Edit Job' : 'Add New Job'}
                                </h2>
                                <button
                                    onClick={() => {
                                        resetForm();
                                        setEditingJob(null);
                                    }}
                                    className="text-gray-500 hover:text-gray-700"
                                >
                                    <X />
                                </button>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Repair Order #
                                    </label>
                                    <input
                                        type="text"
                                        name="repairOrderNumber"
                                        value={currentJob.repairOrderNumber}
                                        onChange={handleInputChange}
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Vehicle Info
                                    </label>
                                    <input
                                        type="text"
                                        name="vehicleInfo"
                                        value={currentJob.vehicleInfo}
                                        onChange={handleInputChange}
                                        placeholder="e.g., 2020 Honda Civic"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Job Description
                                    </label>
                                    <input
                                        type="text"
                                        name="jobDescription"
                                        value={currentJob.jobDescription}
                                        onChange={handleInputChange}
                                        placeholder="e.g., Oil change, brake pads replacement"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Pay Type
                                    </label>
                                    <select
                                        name="payType"
                                        value={currentJob.payType}
                                        onChange={handleInputChange}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="customer_pay">Customer Pay</option>
                                        <option value="warranty">Warranty</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Flat Rate Hours
                                    </label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        name="flatRateHours"
                                        value={currentJob.flatRateHours}
                                        onChange={handleInputChange}
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Actual Hours Worked
                                    </label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        name="actualHours"
                                        value={currentJob.actualHours}
                                        onChange={handleInputChange}
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Date Completed
                                    </label>
                                    <input
                                        type="date"
                                        name="dateCompleted"
                                        value={currentJob.dateCompleted}
                                        onChange={handleInputChange}
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>

                                <div className="md:col-span-2 flex gap-4">
                                    <button
                                        type="button"
                                        onClick={handleSubmit}
                                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
                                    >
                                        <Save />
                                        {editingJob ? 'Update Job' : 'Add Job'}
                                    </button>
                                    <button
                                        type="button"
                                        onClick={() => {
                                            resetForm();
                                            setEditingJob(null);
                                        }}
                                        className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400"
                                    >
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Jobs List */}
                    <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                        <div className="px-6 py-4 border-b border-gray-200">
                            <h2 className="text-xl font-bold text-gray-900">Job History</h2>
                        </div>
                        
                        {jobs.length === 0 ? (
                            <div className="p-8 text-center text-gray-500">
                                No jobs recorded yet. Add your first job to get started!
                            </div>
                        ) : (
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">RO #</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Vehicle</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Job</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Flat Rate</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actual</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Efficiency</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {jobs.map((job) => (
                                            <tr key={job.id} className="hover:bg-gray-50">
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {new Date(job.dateCompleted).toLocaleDateString()}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {job.repairOrderNumber}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {job.vehicleInfo}
                                                </td>
                                                <td className="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
                                                    {job.jobDescription}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {job.flatRateHours}h
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {job.actualHours}h
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                    <span className={`font-medium ${getEfficiencyColor(calculateJobEfficiency(job))}`}>
                                                        {calculateJobEfficiency(job)}%
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    <div className="flex gap-2">
                                                        <button
                                                            onClick={() => handleEdit(job)}
                                                            className="text-blue-600 hover:text-blue-800"
                                                        >
                                                            <Edit2 />
                                                        </button>
                                                        <button
                                                            onClick={() => handleDelete(job.id)}
                                                            className="text-red-600 hover:text-red-800"
                                                        >
                                                            <Trash2 />
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        );
    };

    ReactDOM.render(<FlatRateTracker />, document.getElementById('root'));
</script>
```

</body>
</html>